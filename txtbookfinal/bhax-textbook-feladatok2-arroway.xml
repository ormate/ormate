<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
		A módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf (16-22 fólia)
Ugyanezt írjuk meg C++ nyelven is! (lásd még UDPROG repó: source/labor/polargen)

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
            <para>
        <programlisting language="c"><![CDATA[
import java.util.Random;
import java.io.*;
import java.lang.Math;
public class PolarGen	{
  public final  static int RAND_MAX = 32767;
  private static boolean bExists;
  private double dValue;
  static Random cRandomGenerator = new Random();
  public PolarGen() { 		
	bExists = false;
	cRandomGenerator.setSeed(20); 	
  };
  public double PolarGet()	{
    	if (!bExists)
  {
		double u1, u2, v1, v2, w;
		
		do{
			u1 = cRandomGenerator.nextInt (RAND_MAX) / (RAND_MAX + 1.0); 
			u2 = cRandomGenerator.nextInt (RAND_MAX) / (RAND_MAX + 1.0);
			v1 = 2 * u1 - 1;
			v2 = 2 * u2 - 1;
			w = v1 * v1 + v2 * v2;
		    }
		    
		while (w > 1);
		double r = Math.sqrt ((-2 * Math.log (w)) / w);
		dValue = r * v2; 
		bExists = !bExists;
		return r * v1; 
	}
	else
	{
		bExists = !bExists; 
		return dValue;
	}
  };    
  public static void main(String args[])	{
    PolarGen cPolarGen = new PolarGen();
    double  dEredmeny = cPolarGen.PolarGet();
    System.out.println(dEredmeny);
  }
  </para>
    }]]></programlisting> 
        </para>
        <para>   
            A program ellenőrzi, hogy van e tárolt érték, amennyiben nincs, létrehozza azt a következőképpen: 2 darab -1 és 1 közötti számot hoz létre, majd egyet elvesz, és aztán veszi a négyzetösszegüket. Ez addig ismétlődik, amíg s nagyobb vagy egyenlő mint 1, vagy s egyenlő  0.
            Ezután felveszzük a multiplier-t, ami az "s" -2-szeres logaritmus hányadosának négyzetgyöke. A tárolt érték multiplier szorozva v2-vel, utána pedig v1 szer multiplier értékét.
        </para>
        <para>
            C++ -ban:
        </para>
        
        
      
       
        <programlisting language="c"><![CDATA[       
#include<cmath>
#include <cstdlib>
#include<ctime>
using namespace std;
class PolarGen {
public:
    PolarGen (){
        nincsTarolt = true;
        srand (time (NULL));
    }
    ~PolarGen(){
    }
    double kovetkezo ();
private:
    bool nincsTarolt;
    double tarolt;
};
double PolarGen::kovetkezo() {
    if (nincsTarolt) {
        double u1, u2, v1, v2, w;
        do {
            u1 = rand() / (RAND_MAX + 1.0);
            u2 = rand() / (RAND_MAX + 1.0);
            v1 = 2 * u1 - 1;
            v2 = 2 * u2 -1;
            w = v1 * v1 + v2 * v2;
        } while ( w > 1);
        double r = sqrt ((-2* log(w) / w));
        tarolt = r * v2;
        nincsTarolt = !nincsTarolt;
        return r * v1;
   }
    else {
        nincsTarolt = !nincsTarolt;
      return tarolt;
    }
}
int main(int argc, char** argv) {
    PolarGen pg;
    for (int i = 0; i < 10; i++)
        std::cout<<pg.kovetkezo()<<std::endl;
    return 0;
}
        }]]></programlisting> 

    </section>        

    <section>
        <title>Homokozó</title>
        <para>
rjuk át az első védési programot (LZW binfa) C++ nyelvről Java nyelvre, ugyanúgy működjön!
Mutassunk rá, hogy gyakorlatilag a pointereket és referenciákat kell kiirtani és minden máris működik
(erre utal a feladat neve, hogy Java-ban minden referencia, nincs választás, hogy mondjuk egy
attribútum pointer, referencia vagy tagként tartalmazott legyen).
Miután már áttettük Java nyelvre, tegyük be egy Java Servletbe és a böngészőből GET-es kéréssel
(például a böngésző címsorából) kapja meg azt a mintát, amelynek kiszámolja az LZW binfáját!        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Itt annyi dolgunk van, hogy a C++ szintaktikát használó pointereket és referenciákat át kell írni Java szintaktikának megfelelőekre.
<programlisting language="java"><![CDATA[
            public class LZWBinFa {
 
  public LZWBinFa() {

    fa = gyoker;

  }


  public void egyBitFeldolg(char b) {
    
    if (b == '0') {
   
      if (fa.nullasGyermek() == null) 
      {
        
        Csomopont uj = new Csomopont('0');
        
        fa.ujNullasGyermek(uj);
        
        fa = gyoker;
      } else 
      {
        
        fa = fa.nullasGyermek();
      }
    } 
  else {
      if (fa.egyesGyermek() == null) {
        Csomopont uj = new Csomopont('1');
        fa.ujEgyesGyermek(uj);
        fa = gyoker;
      } else {
        fa = fa.egyesGyermek();
      }
    }
  }

  public void kiir() {
   
    melyseg = 0;
  
    kiir(gyoker, new java.io.PrintWriter(System.out));

  }
 
  public void kiir(java.io.PrintWriter os) {
    melyseg = 0;
    kiir(gyoker, os);
  }

 
  class Csomopont {

   
    public Csomopont(char betu) {
      this.betu = betu;
      balNulla = null;
      jobbEgy = null;
    }

    ;
    
    
    
    public Csomopont nullasGyermek() {
      return balNulla;
    }
    

    public Csomopont egyesGyermek() {
      return jobbEgy;
    }
    

    public void ujNullasGyermek(Csomopont gy) {
      balNulla = gy;
    }
    

    public void ujEgyesGyermek(Csomopont gy) {
      jobbEgy = gy;
    }
    

    public char getBetu() {
      return betu;
    }
    
    private char betu;
    
    private Csomopont balNulla = null;
    private Csomopont jobbEgy = null;
    
  };

 
  private Csomopont fa = null;
 
  private int melyseg, atlagosszeg, atlagdb;
  private double szorasosszeg;
  
  public void kiir(Csomopont elem, java.io.PrintWriter os) {
   
    if (elem != null) {
      ++melyseg;
      kiir(elem.egyesGyermek(), os);
     
      for (int i = 0; i < melyseg; ++i) {
        os.print("---");
      }
      os.print(elem.getBetu());
      os.print("(");
      os.print(melyseg - 1);
      os.println(")");
      kiir(elem.nullasGyermek(), os);
      --melyseg;
    }
  }
 
  protected Csomopont gyoker = new Csomopont('/');
  int maxMelyseg;
  double atlag, szoras;


  public int getMelyseg() {
    melyseg = maxMelyseg = 0;
    rmelyseg(gyoker);
    return maxMelyseg - 1;
  }

  public double getAtlag() {
    melyseg = atlagosszeg = atlagdb = 0;
    ratlag(gyoker);
    atlag = ((double) atlagosszeg) / atlagdb;
    return atlag;
  }

  public double getSzoras() {
    atlag = getAtlag();
    szorasosszeg = 0.0;
    melyseg = atlagdb = 0;

    rszoras(gyoker);

    if (atlagdb - 1 > 0) {
      szoras = Math.sqrt(szorasosszeg / (atlagdb - 1));
    } else {
      szoras = Math.sqrt(szorasosszeg);
    }

    return szoras;
  }

  public void rmelyseg(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      if (melyseg > maxMelyseg) {
        maxMelyseg = melyseg;
      }
      rmelyseg(elem.egyesGyermek());
      
      rmelyseg(elem.nullasGyermek());
      --melyseg;
    }
  }

  public void ratlag(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      ratlag(elem.egyesGyermek());
      ratlag(elem.nullasGyermek());
      --melyseg;
      if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
        ++atlagdb;
        atlagosszeg += melyseg;
      }
    }
  }

  public void rszoras(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      rszoras(elem.egyesGyermek());
      rszoras(elem.nullasGyermek());
      --melyseg;
      if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
        ++atlagdb;
        szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
      }
    }
  }


  public static void usage() {
    System.out.println("Usage: lzwtree in_file -o out_file");
  }

  
  public static void main(String args[]) {
    
    if (args.length != 3) {
     
      usage();
      
      System.exit(-1);
    }
    
    String inFile = args[0];
    
    if (!"-o".equals(args[1])) {
      usage();
      System.exit(-1);
    }

    
    try {

      java.io.FileInputStream beFile =
              new java.io.FileInputStream(new java.io.File(args[0]));
     
      java.io.PrintWriter kiFile =
              new java.io.PrintWriter(
              new java.io.BufferedWriter(
              new java.io.FileWriter(args[2])));

     
      byte[] b = new byte[1];
     
      LZWBinFa binFa = new LZWBinFa();

      
      while (beFile.read(b) != -1) {
        if (b[0] == 0x0a) {
          break;
        }
      }
     
      boolean kommentben = false;

    
      while (beFile.read(b) != -1) {

        if (b[0] == 0x3e) {			
          kommentben = true;
          continue;
        }

        if (b[0] == 0x0a) {			
          kommentben = false;
          continue;
        }

        if (kommentben) {
          continue;
        }

        if (b[0] == 0x4e) // N betű
        {
          continue;
        }

        
        for (int i = 0; i < 8; ++i) {
          
          if ((b[0] & 0x80) != 0) 
          {
            binFa.egyBitFeldolg('1');
          } else 
          {
            binFa.egyBitFeldolg('0');
          }
          b[0] <<= 1;
        }

      }

      
      binFa.kiir(kiFile);

      
      kiFile.println("depth = " + binFa.getMelyseg());
      kiFile.println("mean = " + binFa.getAtlag());
      kiFile.println("var = " + binFa.getSzoras());

      kiFile.close();
      beFile.close();

    } catch (java.io.FileNotFoundException fnfException) {
      fnfException.printStackTrace();
    } catch (java.io.IOException ioException) {
      ioException.printStackTrace();
    }

  }
}

]]></programlisting>
        </para>
    </section>  

    <section>
        <title>„Gagyi”</title>
        <para>
Az ismert formális
„<![CDATA[
while (x <= t && x >= t && t != x);
]]>” tesztkérdéstípusra adj a szokásosnál
(miszerint x, t az egyik esetben az objektum által hordozott érték, a másikban meg az objektum
referenciája) „mélyebb” választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x, t
értékekkel meg nem! A példát építsd a JDK Integer.java forrására3
, hogy a 128-nál inkluzív objektum
példányokat poolozza!
</para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  

    <section>
        <title>Yoda</title>
        <para>
Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
conditions-t! https://en.wikipedia.org/wiki/Yoda_conditions
</para>

        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            <programlisting language="java"><![CDATA[
            class yoda {
 
            public static void main(String args[]){
            String yoda = null;
            if ( yoda.equals("yoda")) { System.out.println("Nem jó");

            }   
            }

            }
            ]]></programlisting>
        </para>
    </section>  
    <section>
        <title>Kódolás from scratch</title>
        <para>
Induljunk ki ebből a tudományos közleményből: http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbpalg.pdf és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
Ha megakadsz, de csak végső esetben: https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitokjavat/apbs02.html#pi_jegyei (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
melyet szeretném, ha átélnél).
</para>

        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  	
        

</chapter>                
